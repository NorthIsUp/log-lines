#!/usr/bin/env zsh
# Disable xtrace as it would mangle the output.
setopt localoptions noxtrace

zparseopts -D -E -- \
    -fd:=fdn u:=fdn \
    -bold=message_bold \
    -color:=message_color -auto-color:=auto_color \
    -no-arrow=no_arrow \
    -arrow:=arrow -arrow-bold=arrow_bold -arrow-color:=arrow_color \
    -decor:=decor -decor-bold=decor_bold -decor-color:=decor_color \
    -label:=label -label-bold=label_bold -label-color:=label_color \
    -interlog:=interlog \
    -label-justify:=label_justify \
    -icon:=icon \
    -nl=number_lines -number-lines=number_lines \
    -file:=file


# [[ ${arrow_bold} ]] && arrow_bold='%B'
# [[ ${decor_bold} ]] && decor_bold='%B'
# [[ ${message_bold} ]] && message_bold='%B'

[[ $icon ]] && icon="${icon[2]}"

[[ $file ]] && file="${file[2]}"

local \
    fdn="${fdn[2]:-2}" \
    arrow="${arrow[2]:-"  -->"}" \
    arrow_bold="${arrow_bold}" \
    arrow_color="${arrow_color[2]:-"magenta"}" \
    decor="${decor[2]:-" "}" \
    decor_bold='%B' \
    decor_color="${decor_color[2]:-" "}" \
    label="${label[2]:-""}" \
    label_bold="${label_bold}" \
    label_color="${label_color[2]:-"white"}" \
    label_justify=${label_justify[2]:-'(r:10:: :)'} \
    _label='\${${label_justify}label}' \
    interlog="${interlog[2]:-""}" \
    interlog_color='' \
    message="$@" \
    message_bold=${message_bold} \
    message_color="${message_color[2]:-"white"}" \
    auto_color=${auto_color[2]:-"auto"} \
    use_color=0 \
    icon=$icon \
    to_print=() \
    file=$file file_only=0 nl_seperator=' > '

# convert paths to numeric fds
[[ "$fdn" == /dev/stdout ]] && fdn=1
[[ "$fdn" == /dev/stderr ]] && fdn=2

# setup colors
case "$auto_color" {
  always)
    use_color=1 ;;
  never)
    use_color=0 ;;
  auto)
    # || -p "$fd"  # check if fd is a pipe, not a number!
    [[ ! -t $fdn || "${TERM-}" == "dumb" ]] && use_color=0 || use_color=1
    ;;
  *)
}

if (( use_color)) {
  if (( ! $+color )) {
    autoload -Uz colors
    colors
  }

  local _reset_color="$reset_color"

  [[ "$arrow_bold" ]] && arrow_color="$fg_bold[$arrow_color]" || arrow_color="$fg[$arrow_color]"
  [[ "$message_bold" ]] && message_color="$fg_bold[$message_color]" || message_color="$fg[$message_color]"
  [[ "$label_bold" ]] && label_color="$fg_bold[$label_color]" || label_color="$fg[$label_color]"
  file_color="$fg[yellow]"
  nl_seperator="$arrow_color > $message_color"

  [[ "$interlog" ]] && {
    (( $+__interlog_color_cache )) || typeset -gA __interlog_color_cache

    if (( ! ${+__interlog_color_cache[$interlog]} )) {
      local interlog_crc="$(crc16 $interlog)"
      __interlog_color_cache[$interlog]=$(( ( interlog_crc % 213) + 17 ))
    }

    interlog_color="\033[38;5;${__interlog_color_cache[$interlog]}m"
  }
} else {
  # color is disabled
  local \
    _reset_color='' \
    arrow_color='' \
    message_color='' \
    label_color='' \
    interlog_color=''
}

if [[ "$file" ]] {
  number_lines=1
  if [[ !"$message" ]] {
    message="$file_color$file$_reset_color"
    file_only=1
  }
  file_lines="$(cat "$file" )"
  message="$message\n${file_lines%%[[:blank:]]##}"
}

if [[ $number_lines ]] {
  message=( "${(f)message}" )
  local numbered_lines="$(echo ${message[2,-1]} | nl -v$((file_only?1:2)) -ba -w4 -s$nl_seperator)"
  message="${message[1]}\n$numbered_lines"
}


if [[ ! "$no_arrow" ]] {
  to_print=("$to_print" "$arrow_color${arrow}$_reset_color")
}

if [[ "$icon" ]] {
  to_print=("$to_print" "$icon")
}

if [[ "$interlog" ]] {
  to_print=("$to_print" "$interlog_color\[$interlog\]$_reset_color")
}

if [[ "$message" ]] {
  to_print=("$to_print" "$message_color${(j:\n:)message}$_reset_color")
}

if [[ "$label" ]] {
  if [[ "$label_justify" =~ "^([0-9]+)$" ]] {
    label_justify="(r:${match[2]}:: :)"
  } elif [[ "$label_justify" =~ "^([r|l]):?([0-9]+)$" ]] {
    label_justify="(${match[1]}:${match[2]}:: :)"
  } elif [[ "$label_justify" =~ "^([r|l]):?([0-9]+):?(.*)$" ]] {
    label_justify="(${match[1]}:${match[2]}::${match[3]}:)"
  }
  to_print=("$label_color"${(e)"${(e)_label}"}"$_reset_color" "$to_print")
}

message="${(j: :)to_print}"
print -u$fdn "${(j: :)to_print}"
